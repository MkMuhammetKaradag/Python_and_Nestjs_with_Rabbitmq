# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  profilePhoto: String
  roles: [UserRole!]!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
  interests: [String!]!
  following: [User!]
  followers: [User!]
  isPrivate: Boolean!
}

"""User roles"""
enum UserRole {
  ADMIN
  USER
}

type Media {
  url: String!
  type: MediaType!
  caption: String
}

"""Type of media content"""
enum MediaType {
  IMAGE
  VIDEO
}

type Like {
  _id: ID!
  user: User!
  post: Post!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  _id: ID!
  user: User!
  post: Post!
  content: String!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
}

type Post {
  _id: ID!
  user: User!
  media: [Media!]!
  title: String!
  status: PostStatus!
  createdAt: String!
  updatedAt: String!
  tags: [String!]!
  likes: [Like!]
  comments: [Comment!]
  score: Float!
}

"""Status of the post"""
enum PostStatus {
  PUBLISHED
  DRAFT
}

type FollowRequest {
  _id: ID!
  from: User!
  to: User!
  status: FollowRequestStatus!
}

"""Status of the Request"""
enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type RegisterUserObject {
  activationToken: String!
}

type LoginUserObject {
  user: User
  access_token: String!
  refresh_token: String!
}

type SignUrlOutput {
  signature: String!
  timestamp: Float!
  cloudName: String!
  apiKey: String!
}

type RemoveLikeObject {
  success: Boolean!
  message: String!
}

type DiscoverPostsObject {
  _id: ID!
  likeCount: Float!
  commentCount: Float!
  score: Float!
  firstMedia: Media!
}

type GetPostObject {
  _id: ID!
  title: String!
  tags: [String!]!
  media: [Media!]!
  createdAt: String!
  likeCount: Float!
  commentCount: Float!
  user: User!
}

type GetPostsFromFollowedUsersObject {
  _id: ID!
  likeCount: Float!
  commentCount: Float!
  title: String!
  user: User!
  media: [Media!]!
}

type Query {
  getQuery: String!
  getMe: User!
  protectedQuery: String!
  getFollowRequests: [FollowRequest!]!
  getPost(postId: String!): GetPostObject!
  getPostsFromFollowedUsers(input: GetPostsFromFollowedUsers!): [GetPostsFromFollowedUsersObject!]!
  discoverPosts(input: GetPostsFromFollowedUsers!): [DiscoverPostsObject!]!
}

input GetPostsFromFollowedUsers {
  page: Float!
  pageSize: Float!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  loginUser(input: LoginUserInput!): LoginUserObject!
  logout: String!
  registerUser(input: RegisterUserInput!): RegisterUserObject!
  activationUser(input: ActivationUserInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  resetPassword(input: ResetPasswordInput!): User!
  followUser(targetUserId: String!): String!
  unFollowUser(targetUserId: String!): String!
  acceptFollowRequest(requestId: String!): String!
  rejectFollowRequest(requestId: String!): String!
  setUserProfilePrivate(isPrivate: Boolean!): String!
  createPost(input: CreatePostInput!): Post!
  getSignedUploadUrl(input: SignUrlInput!): SignUrlOutput!
  addLikePost(postId: String!): Like!
  removeLikePost(postId: String!): RemoveLikeObject!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  checkHumanInMedia(input: CreatePostInput!): String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  roles: [UserRole!]! = [USER]
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  roles: [UserRole!]! = [USER]
}

input ActivationUserInput {
  activationToken: String!
  activationCode: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input CreatePostInput {
  title: String!
  media: [CreateMediaInput!]!
}

input CreateMediaInput {
  url: String!
  publicId: String!
  type: MediaType!
}

input SignUrlInput {
  publicId: String!
}

input CreateCommentInput {
  postId: ID!
  content: String!
}

input UpdateCommentInput {
  commentId: ID!
  content: String
  isDeleted: Boolean
}

type Subscription {
  createCommentPost(postId: String!): Comment!
}