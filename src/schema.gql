# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Message {
  _id: ID!
  sender: User!
  chat: Chat!
  content: String!
  isRead: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Chat {
  _id: ID!
  participants: [User!]!
  messages: [Message!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  _id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  profilePhoto: String
  roles: [UserRole!]!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
  interests: [String!]!
  following: [User!]
  followers: [User!]
  isPrivate: Boolean!
  chats: [Chat!]
}

"""User roles"""
enum UserRole {
  ADMIN
  USER
}

type Media {
  url: String!
  type: MediaType!
  publicId: String!
  caption: String
}

"""Type of media content"""
enum MediaType {
  IMAGE
  VIDEO
}

type Comment {
  _id: ID!
  user: User!
  post: Post!
  content: String!
  isDeleted: Boolean!
  deletedAt: String
  createdAt: String!
  updatedAt: String!
}

type Post {
  _id: ID!
  user: User!
  media: [Media!]!
  title: String!
  status: PostStatus!
  createdAt: String!
  updatedAt: String!
  tags: [String!]!
  likes: [User!]
  comments: [Comment!]
  score: Float!
}

"""Status of the post"""
enum PostStatus {
  PUBLISHED
  DRAFT
}

type FollowRequest {
  _id: ID!
  from: User!
  to: User!
  status: FollowRequestStatus!
}

"""Status of the Request"""
enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type RegisterUserObject {
  activationToken: String!
}

type LoginUserObject {
  user: User
  access_token: String!
  refresh_token: String!
}

type SignUrlOutput {
  signature: String!
  timestamp: Float!
  cloudName: String!
  apiKey: String!
}

type RemoveLikeObject {
  success: Boolean!
  message: String!
}

type DiscoverPosts {
  _id: ID!
  likeCount: Float!
  commentCount: Float!
  score: Float!
  firstMedia: Media!
}

type DiscoverPostsObject {
  posts: [DiscoverPosts!]!
  totalCount: Float!
}

type GetPostObject {
  _id: ID!
  title: String!
  tags: [String!]!
  media: [Media!]!
  createdAt: String!
  isLiked: Boolean!
  likeCount: Float!
  commentCount: Float!
  user: User!
}

type GetPostsFromFollowedUsersObject {
  _id: ID!
  likeCount: Float!
  commentCount: Float!
  isLiked: Boolean!
  title: String!
  user: User!
  media: [Media!]!
}

type GetPostCommentsObject {
  comments: [Comment!]!
  totalCount: Float!
}

type GetUserProfileObject {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String
  profilePhoto: String
  createdAt: String
  isPrivate: Boolean
  followersCount: Float
  followingCount: Float
  isFollowing: Boolean
  chatId: String
  restricted: Boolean!
}

type GetUserFollowingObject {
  _id: ID!
  firstName: String!
  lastName: String!
  profilePhoto: String
  isFollowing: Boolean
}

type SearchUser {
  _id: ID!
  profilePhoto: String
  followingCount: Float!
  userName: String!
}

type GetSearchForUserObject {
  users: [SearchUser!]!
  totalCount: Float!
}

type GetUserChats {
  _id: ID!
  participants: [User!]!
  lastMessage: Message
}

type GetChatMessagesObject {
  messages: [Message!]!
  totalMessages: Float!
  totalPages: Float!
  currentPage: Float!
}

type VideoCallNotification {
  chatId: String!
  participants: [String!]!
  userName: String!
}

type Query {
  getQuery: String!
  getMe: User!
  protectedQuery: String!
  getFollowRequests: [FollowRequest!]!
  getUserProfile(userId: String!): GetUserProfileObject!
  getUserFollowing(userId: String!): [GetUserFollowingObject!]!
  getUserFollowers(userId: String!): [GetUserFollowingObject!]!
  getSearchForUser(input: GetSearchForUserInput!): GetSearchForUserObject!
  getPost(postId: String!): GetPostObject!
  getPostsFromFollowedUsers(input: GetPostsFromFollowedUsersInput!): [GetPostsFromFollowedUsersObject!]!
  discoverPosts(input: GetPostsFromFollowedUsersInput!): DiscoverPostsObject!
  getPostComments(input: GetPostCommentsInput!): GetPostCommentsObject!
  getUserPosts(input: GetUserPostsInput!): DiscoverPostsObject!
  getChats: [GetUserChats!]!
  getChatMessage(input: GetChatMessagesInput!): GetChatMessagesObject!
}

input GetSearchForUserInput {
  searchText: String!
  page: Float!
  pageSize: Float!
}

input GetPostsFromFollowedUsersInput {
  page: Float!
  pageSize: Float!
}

input GetPostCommentsInput {
  postId: String!
  page: Float!
  pageSize: Float!
  extraPassValue: Float
}

input GetUserPostsInput {
  userId: String!
  page: Float!
  pageSize: Float!
}

input GetChatMessagesInput {
  chatId: String!
  page: Float!
  pageSize: Float!
  extraPassValue: Float
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  loginUser(input: LoginUserInput!): LoginUserObject!
  logout: String!
  registerUser(input: RegisterUserInput!): RegisterUserObject!
  activationUser(input: ActivationUserInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  resetPassword(input: ResetPasswordInput!): User!
  followUser(targetUserId: String!): String!
  unFollowUser(targetUserId: String!): String!
  acceptFollowRequest(requestId: String!): String!
  rejectFollowRequest(requestId: String!): String!
  setUserProfilePrivate(isPrivate: Boolean!): String!
  createPost(input: CreatePostInput!): Post!
  getSignedUploadUrl(input: SignUrlInput!): SignUrlOutput!
  addLikePost(postId: String!): String!
  removeLikePost(postId: String!): RemoveLikeObject!
  createComment(input: CreateCommentInput!): Comment!
  updateComment(input: UpdateCommentInput!): Comment!
  checkHumanInMedia(input: CreatePostInput!): String!
  createChat(participantIds: [String!]!): Chat!
  addMessageToChat(input: AddMessageToChatInput!): Message!
  joinVideoRoom(chatId: String!): String!
  startVideoCall(chatId: String!): Boolean!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  roles: [UserRole!]! = [USER]
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  userName: String!
  password: String!
  roles: [UserRole!]! = [USER]
}

input ActivationUserInput {
  activationToken: String!
  activationCode: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

input CreatePostInput {
  title: String!
  media: [CreateMediaInput!]!
}

input CreateMediaInput {
  url: String!
  publicId: String!
  type: MediaType!
}

input SignUrlInput {
  publicId: String!
}

input CreateCommentInput {
  postId: ID!
  content: String!
}

input UpdateCommentInput {
  commentId: ID!
  content: String
  isDeleted: Boolean
}

input AddMessageToChatInput {
  chatId: String!
  content: String!
}

type Subscription {
  createCommentPost(postId: String!): Comment!
  createMessageToChat(chatId: String!): Message!
  videoCallStarted(userId: String!): VideoCallNotification!
}